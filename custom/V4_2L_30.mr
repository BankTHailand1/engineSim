import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()
label cycle(3 * 360 * units.deg)

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
}

private node head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 18 * units.cc;
    input intake_runner_volume: 150.0 * units.cc;
    input intake_runner_cross_section_area: 2.2 * units.inch * 2.2 * units.inch;
    input exhaust_runner_volume: 50.0 * units.cc;
    input exhaust_runner_cross_section_area: 1.5 * units.inch * 1.5 * units.inch;

    input flow_attenuation: 1.0;
    input lift_scale: 1.0;
    input flip_display: false;
    alias output __out: head;

    function intake_flow(50 * units.thou)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(50 * lift_scale, 1 * flow_attenuation)
        .add_flow_sample(100 * lift_scale, 103 * flow_attenuation)
        .add_flow_sample(150 * lift_scale, 156 * flow_attenuation)
        .add_flow_sample(200 * lift_scale, 214 * flow_attenuation)
        .add_flow_sample(250 * lift_scale, 249 * flow_attenuation)
        .add_flow_sample(300 * lift_scale, 268 * flow_attenuation)
        .add_flow_sample(350 * lift_scale, 280 * flow_attenuation)
        .add_flow_sample(400 * lift_scale, 280 * flow_attenuation)
        .add_flow_sample(450 * lift_scale, 281 * flow_attenuation)

    function exhaust_flow(50 * units.thou)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(50 * lift_scale, 1 * flow_attenuation)
        .add_flow_sample(100 * lift_scale, 72 * flow_attenuation)
        .add_flow_sample(150 * lift_scale, 113 * flow_attenuation)
        .add_flow_sample(200 * lift_scale, 160 * flow_attenuation)
        .add_flow_sample(250 * lift_scale, 196 * flow_attenuation)
        .add_flow_sample(300 * lift_scale, 222 * flow_attenuation)
        .add_flow_sample(350 * lift_scale, 235 * flow_attenuation)
        .add_flow_sample(400 * lift_scale, 245 * flow_attenuation)
        .add_flow_sample(450 * lift_scale, 246 * flow_attenuation)

    generic_cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: intake_runner_volume,
        intake_runner_cross_section_area: intake_runner_cross_section_area,
        exhaust_runner_volume: exhaust_runner_volume,
        exhaust_runner_cross_section_area: exhaust_runner_cross_section_area,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        valvetrain: standard_valvetrain(
            intake_camshaft: intake_camshaft,
            exhaust_camshaft: exhaust_camshaft
        ),
        flip_display: flip_display
    )
}

private node cams {
    input lobe_profile;
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: lobe_profile;
    input lobe_separation: 114 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;  
    input advance: 0 * units.deg; 
    input base_radius: 0.0 * units.inch;

    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;

    output intake_cam_1: _intake_cam_1;
    output exhaust_cam_1: _exhaust_cam_1;

    camshaft_parameters params (
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)
    camshaft _intake_cam_1(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_1(params, lobe_profile: exhaust_lobe_profile)

    label rot(90 * units.deg)
    label rot360(360 * units.deg)

    _exhaust_cam_0
        .add_lobe(rot360 - exhaust_lobe_center + ((0.0 / 4.0) * 720) * units.deg) // 1
        .add_lobe(rot360 - exhaust_lobe_center + (((3.0 / 4.0) * 720) - 30) * units.deg) // 3
    _intake_cam_0
        .add_lobe(rot360 + intake_lobe_center + ((0.0 / 4.0) * 720) * units.deg) // 1
        .add_lobe(rot360 + intake_lobe_center + (((3.0 / 4.0) * 720) - 30) * units.deg) // 3

    _exhaust_cam_1
        .add_lobe(rot360 - exhaust_lobe_center + (((2.0 / 4.0) * 720) - 15) * units.deg) // 2
        .add_lobe(rot360 - exhaust_lobe_center + ((1.0 / 4.0) * 720) * units.deg) // 4
    _intake_cam_1
        .add_lobe(rot360 + intake_lobe_center + (((2.0 / 4.0) * 720) - 15) * units.deg) // 2
        .add_lobe(rot360 + intake_lobe_center + ((1.0 / 4.0) * 720) * units.deg) // 4
}

private node turbulence_to_flame_speed_ratio {
    alias output __out:
        function(5.0)
            .add_sample(0.0, 1.25 * 100.0)
            .add_sample(5.0, 1.5 * 95.0)
            .add_sample(10.0, 1.75 * 80.0)
            .add_sample(15.0, 2.0 * 85.0)
            .add_sample(20.0, 2.0 * 70.0)
            .add_sample(25.0, 2.0 * 75.0)
            .add_sample(30.0, 2.0 * 70.0)
            .add_sample(35.0, 2.0 * 65.0)
            .add_sample(40.0, 2.0 * 65.0)
            .add_sample(45.0, 2.0 * 60.0)
            .add_sample(50.0, 2.0 * 60.0)
            .add_sample(55.0, 2.0 * 60.0)
            .add_sample(60.0, 2.0 * 55.0)
            .add_sample(65.0, 2.0 * 55.0)
            .add_sample(70.0, 2.0 * 55.0);
}

public node customEngine {
    alias output __out: engine;

    engine engine(
        name: "V8 90AV",
        starter_torque: 600 * units.lb_ft,
        starter_speed: 200 * units.rpm,
        redline: 23000 * units.rpm,
        throttle_gamma: 2.0,
        fuel: fuel(
            max_turbulence_effect: 10.00,
            max_dilution_effect: 20.0,
            burning_efficiency_randomness: 1.0,
            max_burning_efficiency: 10.0,
            turbulence_to_flame_speed_ratio: turbulence_to_flame_speed_ratio()
        ),
        hf_gain: 0.01,
        noise: 1.0,
        jitter: 0.6,
        simulation_frequency: 10000
    )

    wires wires()

    label stroke(60.0 * units.mm)
    label bore(75.5 * units.mm)
    label rod_length(stroke * 2.017)
    label rod_mass(80 * units.g)
    label compression_height(1.0 * units.inch)
    label crank_mass(30 * units.kg)
    label flywheel_mass(30 * units.lb)
    label flywheel_radius(8 * units.inch)

    label crank_moment(
        1.5 * disk_moment_of_inertia(mass: crank_mass, radius: stroke)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 1 * units.kg, radius: 1.0 * units.cm)
    )

    label v_angle(30 * units.deg)
    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 20.0 * units.lb_ft,
        moment_of_inertia:
            crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: (90 - 15) * units.deg
    )

    rod_journal rj0(angle: 0 * units.deg)
    rod_journal rj1(angle: 270 + 15 * units.deg)
    rod_journal rj2(angle: 90 + 30 * units.deg)
    rod_journal rj3(angle: 180 * units.deg)
    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)

    piston_parameters piston_params(
        mass: (80) * units.g,
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: 0.0
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    intake intake(
        plenum_volume: 1.725 * units.L,
        plenum_cross_section_area: 20.0 * units.cm2,
        intake_flow_rate: k_carb(700.0),
        runner_flow_rate: k_carb(540.0),
        runner_length: 19.0 * units.inch,
        idle_flow_rate: k_carb(0.0),
        idle_throttle_plate_position: 0.9983,
        velocity_decay: 1.0
    )

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(310.0),
        primary_tube_length: 38.0 * units.inch,
        primary_flow_rate: k_carb(270.0),
        velocity_decay: 1.0
    )
    
    exhaust_system exhaust0(
        es_params,
        audio_volume: 8.0,
        length: 220 * units.inch,
        impulse_response: ir_lib.default_0

    )
    exhaust_system exhaust1(
        es_params,
        audio_volume: 0.008,
        length: 120 * units.inch,
        impulse_response: ir_lib.default_0
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: stroke / 2 + rod_length + compression_height
    )

    label spacing(0 * units.inch)

    cylinder_bank b0(bank_params, angle: -v_angle / 2.0)
    cylinder_bank b1(bank_params, angle: v_angle / 2.0)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.0)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire1,
            sound_attenuation: 6.2,
            primary_length: 3 * spacing + 2 * units.cm
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.0)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire3,
            sound_attenuation: 2.2,
            primary_length: 1 * spacing + 3 * units.cm
        )
        .set_cylinder_head(
            head(
                intake_camshaft: camshaft.intake_cam_0,
                exhaust_camshaft: camshaft.exhaust_cam_0,
                flip_display: false,
                flow_attenuation: 1.2)
        )
    b1
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.0)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire2,
            sound_attenuation: 4.2,
            primary_length: 2 * spacing + 5 * units.cm
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.0)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire4,
            sound_attenuation: 1.2,
            primary_length: 0 * spacing + 0 * units.cm
        )
        .set_cylinder_head(
            head(
                intake_camshaft: camshaft.intake_cam_1,
                exhaust_camshaft: camshaft.exhaust_cam_1,
                flow_attenuation: 4.2,
                flip_display: true)
        )

    engine
        .add_cylinder_bank(b0)
        .add_cylinder_bank(b1)

    engine.add_crankshaft(c0)

    harmonic_cam_lobe intake_lobe(
        duration_at_50_thou: 234 * units.deg,
        gamma: 1.1,
        lift: 551 * units.thou,
        steps: 256
    )

    harmonic_cam_lobe exhaust_lobe(
        duration_at_50_thou: 235 * units.deg,
        gamma: 1.1,
        lift: 551 * units.thou,
        steps: 256
    )

    cams camshaft(
        lobe_profile: "N/A",

        intake_lobe_profile: intake_lobe,
        exhaust_lobe_profile: exhaust_lobe,
        intake_lobe_center: 116 * units.deg,
        exhaust_lobe_center: 116 * units.deg,
        base_radius: 1.0 * units.inch
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 12 * units.deg)
        .add_sample(1000 * units.rpm, 12 * units.deg)
        .add_sample(2000 * units.rpm, 20 * units.deg)
        .add_sample(3000 * units.rpm, 30 * units.deg)
        .add_sample(4000 * units.rpm, 40 * units.deg)
        .add_sample(5000 * units.rpm, 40 * units.deg)
        .add_sample(6000 * units.rpm, 40 * units.deg)
        .add_sample(7000 * units.rpm, 40 * units.deg)
        .add_sample(8000 * units.rpm, 40 * units.deg)

    ignition_module ignition_module(timing_curve: timing_curve, rev_limit: 24500 * units.rpm, limiter_duration: 0.05)
    ignition_module
            .connect_wire(wires.wire1,  ((0.0 / 4.0) * 720) * units.deg)
            .connect_wire(wires.wire2,  ((2.0 / 4.0) * 720) * units.deg)
            .connect_wire(wires.wire3,  ((3.0 / 4.0) * 720) * units.deg)
            .connect_wire(wires.wire4,  ((1.0 / 4.0) * 720) * units.deg)

    engine.add_ignition_module(ignition_module)
}

private node corvette {
    alias output __out:
        vehicle(
            mass: 2850 * units.kg,
            drag_coefficient: 0.8,
            cross_sectional_area: (66 * units.inch) * (50 * units.inch),
            diff_ratio: 5.20,
            tire_radius: (16 / 2) * units.inch,
            rolling_resistance: 500 * units.N,
            stiffness: 50 * units.lb_ft / units.deg,
            damping: 15.0,
            max_flex: 5 * units.deg,
            limit_flex: true,
            simulate_flex: true,
            max_brake_force: 10000 * units.N
        );
}

private node supra_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 580 * units.lb_ft
        )
        .add_gear(3.8)
        .add_gear(2.8)
        .add_gear(2.15)
        .add_gear(1.75)
        .add_gear(1.48)
        .add_gear(1.18);
}

public node main {
    run(
        engine: customEngine(),
        vehicle: corvette(),		
        transmission: supra_transmission()
    )
}

main()